.NET 기반의 웹게시판 만들기
https://guyv.tistory.com/category/%E2%93%9Frogramming/asp.net%20%EA%B2%8C%EC%8B%9C%ED%8C%90

(21.02.19)
1. .net 버전은 4.0까지 나왔으나 지금 2.0이 웹호스팅 업체의 대부분 지원해주는 버전이므로 2.0을 사용한다.

2. 웹서버 사용을 위해 IIS를 설치한다.
  *IIS란.  (Internet Information Server)
  윈도우를 서버로 사용할 수 있도록 도와주는 서비스들의 모임

  *IIS 설치 방법
  제어판>프로그램 및 기능>Windows 기능 켜기/끄기 들어간 후
  - .NET Framework3.5(NET2.0및3.0 포함)
  - 인터넷정보서비스>(FTP 서버),(World Wide Web 서비스), (웹 관리 도구 : IIS관리 콘솔) 
  위의 것들을 체크 한 후 확인버튼을 누른다.
  그러면 윈도우 검색창에서 IIS를 검색하면 IIS 관리자 앱을 실행할 수 있다.

3. IIS를 설치 및 설정하면 "ASP"를 사용할 수 있다.
  - ASP란 (Active Server Page) : 동적으로 서버에서 작동하는 페이지이다.
  - HTML 안에 <% %>를 통해 ASP를 실행시킨다
  - 서버사이드에서 작동하는 스크립트(인터프리터) 언어이다. VBScript라는 문법으로 코딩한다.
  - 개발/유지보수에 용이. 대용량 처리하는데 약점.

4. 닷넷에 대한 기본지식
  - 뒤에()가 붙으면 메소드이다.
    : 메소드는 aspx 파일이 열리면 처음으로 무조건 실행되는 기능이다.
  - 기본적인 닷넷의 구조. 네임스페이스{} 내에 클래스{} 내에 메소드()
  - 네임스프에스 클래스를 묶은 것임.
  - html 소스에서 닷넷 소스는 빠지게 됨. (실행 결과문은 html이란 뜻)

5. C#으로 구구단 만들기.
  - C# 조건문,반복문의 사용법(C,C++과 같았다.)
  if 문
  for(초기식; 조건식; 증감식) { // 반복해서 실행될 코드 }
  while(조건식) { // 반복해서 실행될 코드 증감식 }
  - 클래스와 System.IO.File의 사용법
  인스턴스 : 클래스를 가져다 쓰기 쉽게 사용하는 변수
  정적인 경우는 인스턴스화를 시킬필요 없음.
  - 메서드의 사용법

6. 방문자 수 찍어주는 메서드
  - count.aspx 웹페이지가 열릴 때,
  1) count.txt 파일이 없으면 1을 저장.
  2) count.txt 파일이 있으면 count.txt 파일에 기록된 숫자에 1을 더해서 저장
  - 현재 방문수를 특정 위치에 뿌려주기.


7. asp.net의 UI인 컨트롤.
  - form 태그를 사용하여 <form action="경로" method="get이냐 post냐 요청방식"> </form> 이렇게 사용한다.
  - get 메서드를 사용해서 전송하면 어떤 값으로 전송되는지 주소로 구분이 가능하다.<a>태그의 링크형태로 값을 전송할 수도 있다.
  - post 메서드를 사용해서 전송하면 주소에 붙여서 전송하지 않고 내용으로 전달한다. 보안성이 필요할 때 사용 (파일전송도)
  - 게시판의 경우 글내용이 있으므로 get으로 보내선 안되고 post로 보내야 한다.
  
8. request와 response.
  -request의 경우
    Request.Form["name명"];            // 1. POST받기
    Request.QueryString["name명"];     // 2. GET받기
    Request["name명"];                 // 3. GET/POST 구분없이 받기

(21.02.20)
  - 일단 오늘은 상대방의 노트북에서 왜 접속이 안될까를 생각해보려고 한다.
  같은 공유기를 쓰는상태에선 상대방 노트북에서 접속이 가능하다.
  그러나 만약 핸드폰 LTE를 써서 접속을 시도할 시 불가능하다.

<13장~(15) Extra Part>
(21.02.21)
  1.File 제어 
  <input type="file" size="15" name="uploadfile"> <form> 태그에 enctype 이라는 속성 추가
  인코딩(변환)을 어떻게 하는지 추가하는 것임 "multipart/form-data"로 지정
  
  [웹하드 기능을 하는 웹페이지 만들어 보기]
    1) 파일 업로드
    2) 파일 삭제
    3) 폴더 생성
    4) 폴더 삭제

  위 기능은 일단 나중에 server와 html 간의 통신 때 쓰는 기능이 필요하기에 나중에 하는 걸로..
  나중에 게시판 만들 때 해보고 싶은 리스트로 만들어 두자.

  2. 컨트롤의 개념
  asp.net 에서는 거의 대부분의 태그들(<table>,<form><input type=...> 등..)을 모두 프로그래밍 방식으로 사용할 수 있다
  - 기존의 폼컨트롤 -> asp에서 사용하는 컨트롤로 변경한다. form 태그, input 태그, 서버단에서 사용하는 방식이 달라진다.
    1)  기존 사용법
        <form method="post" action="control1.aspx"> 
        <input type="text" name="userid">

      server:
      Response.Write("아이디: " + Request["userid"] + "<br>");

    2) 변형문
        <form runat="server">
        <input type="text" id="userid" runat="server">

      server:
      Response.Write("아이디: " + userid.Value + "<br>");

    1),2) 두개 중 하나를 써도 되는데 "2)의 경우" 모두 post 방식이다. (method는생략)
    name 대신 id를 사용 form 태그에는 runat="server"를 사용  
    onserverclick="" (event기반의 프로그래밍) - 버튼이나, 체크박스, 텍스트 박스 등에 걸 수 있음

    3) void Login_Proc(object o, EventArgs e) 메서드를 사용했음
    object o : System.Object (닷넷에서의 가장 최고 클래스) 위의 코드의 경우 버튼
    EventArgs?  이벤트의 argument 위의 경우 `클릭`
    위의 메서드에서 두개의 정보를 받는다.
    (1)어떤 객체로부터 발생했고, 이벤트 발생시에 (2)어떤 정보와 함께 실려서 오는지

    4) Request["userid"] --> userid.Value로 바뀜
    userid가 인스턴스화된 객체가 된 것임. 

    5) 닷넷 서버컨트롤은 두가지가 있음
    - WebForm 컨트롤
    - HTMLForm 컨트롤 : 단순히 태그에 id와 runat="server"만 붙여주면 사용할 수 있음. 

  3. 한줄 메모장 만들기
    입력 : [이름], [내용], [버튼]
    출력 : [이름], [내용], [시간]

    다음과 같은 문제점이 있었음
    1) 첫번째 문제, HTML 영역 아래에 ASP 코딩한부분을 출력하고 싶으면 어떻게 해야하는가
    아직 해결 안됨

    2) 두번째 문제, 저장할 때 writeline 으로 txt 파일을 저장하려고 하는데, 줄바꿈 처리를 어떻게 해야하는가
    WriteLine을 할 시 알아서 줄바꿈이 되었음. 마지막에 줄바꿈 문자가 같이 들어감.

    3) 세번째 문제, 줄바꿈 처리 후 이름/내용/시간 순으로 출력해줘야하는데 구분자(/#/) 단위로 어떻게 끊을 수 있는가
    string.split("구분자") 함수를 사용하여 해결.

  (21.02.23)
  <15장~>
  1. 서버컨트롤이란 태그에 runat="server"를 붙여줌으로써 사용할 수 있다.
  asp.net 에서 html 의 tag를 구현할 수 있게 해준다.

  2. asp.net 의 모든 컨트롤에는 속성을 제어하기 위한 컬렉션(Collection)이 존재한다. Attributes
  대표적인 Attributes 컬렛션
  [메서드]
  Add(string key, string value) : key라는 이름으로 value 값으로 추가
  Clear() : 모두 삭제
  Remove(string key) : 해당 key이름의 컬렉션 삭제

  [속성]
  Count : 해당 컬렉션의 갯수
  Item : 컬렉션의 특성 값
  
  [사용예]
  BODY_TAG.Attributes.Add("bgcolor", "yellow");

  [컨트롤 생성, 추가]
  1) <form>을 만들기 위해 HtmlForm 클래스를 사용한다.
  2) <form> 에 '텍스트박스'와 '버튼'을 하나 넣는다.
  3) 텍스트박스의 id 는 user_name(ID="user_name") 으로 준다.
  4) 버튼에 나오는 텍스트는 "인사하기"라고 준다. (Value="인사하기")
  5) 버튼을 클릭시 메서드를 호출하기 위해 이벤트(button_click)를 걸어준다. (이벤트? 처음보는 내용)
  6) 그리고 출력을 위해 HtmlGenericControl 서버컨트롤을 추가한다.(ID="output")
  7) <body>태그에 서버컨트롤 form을 추가한다. 
  8) 추가된 form에 텍스트박스, 버튼 순으로 넣어준다.

  [버튼클릭시 처리]
  9) 버튼이 클릭됐을 때 호출되는 이벤트 메서드(button_click)를 만든다.
  10) 출력되는 컨트롤인 output 을 FindControl("id명") 메서드로 찾아준다.
  11) 텍스트박스 컨트롤인 user_name 을 FindControl("id명") 메서드로 찾아준다.
  12) 텍스트박스에 값이 없으면 빨간색으로 output 에 "이름을 입력하세요!"라고 출력한다. 
  13) 텍스트박스에 값이 있으면 "Hello! (입력값)" 의 형식으로 output 에 출력해준다

    *) 클래스 생성자
    클래스명 사용할_이름 = new 클래스명();

    *) 컨트롤을 넣는 방법
    BODY_TAG.Controls.Add(컨트롤 인스턴스명);

    *) 이벤트 연결
    클래스명.이벤트명 += new EventHandler(메서드명);
    (이벤트를 지정시 +=, 이벤트 해제시 -= 를 사용)

    *)HtmlControl 의 특징
    1. 태그(<tag>)에 runat="server"만 붙여주면 해당 태그에 맞는 HtmlControl(서버컨트롤)로 변신하게 됨.
    2. 일반적으로 사용하는 대부분의 태그뿐만 아니라, 모든 <form>태그를 서버컨트롤로 이용할 수 있기 때문에, `프로그래밍 방식`으로 태그를 제어하거나 값을 읽을 수 있음. 
    (프로그래밍 방식이라 함은 그냥 태그를 사용하는 것이 아니라 입력에 맞게끔 출력을 내보내주는 동적 프로그램을 의미)

  3. 웹폼 (웹컨트롤)의 특징
  <ASP:DropDownList id="넘어갈 key" runat="server">
      <ASP:ListItem value="넘어갈 value">보여지는 내용</ASP:ListItem>
      <ASP:ListItem value="넘어갈 value">보여지는 내용</ASP:ListItem>
        ....
  </ASP:DropDownList>
  위와 같이 HTML 태그와 비슷하게 사용하게 된다. 넘어갈 key와 value를 지정해줌.
  그런데 꼭 <form runat="server">...</form> 태그로 감싸줘야 사용할 수 있다.

  *) 렌더링 이란 서버컨트롤이 결과물로 변형되는 것.
  Label 웹폼을 사용하여 출력할 수 있다.
  Label 웹폼은 입력받는 형식의 컨트롤은 아니기에 <form>으로 감싸줄 필요 없음

  웹폼은 임의로 지정한 커스텀으로 태그의 속성을 지정해 줄 수 있다. ex) <font effect="mine"> 에서 effect와 같은 속성
  또한 웹폼은 SqlDataSource 및 ObjectDataSource 클래스와 같이 aspx에 태그로 변경되지는 않지만 데이터(Data)작업을 위한 클래스도 포함되어 있다.  ex) 달력기능을 그냥 쉽게 만들 수 있다. <ASP:Calendar>

  <ASP:Calendar>의 경우 디자인 지정도 맘대로 할 수 있음

  4. 웹폼의 사용법
    - 웹폼 컨트롤은 <ASP:웹폼클래스명 runat="server" /> 형식으로 디자인 단에  만들 수 있다.
    - 웹폼 컨트롤은 클래스이기 때문에, 프로그래밍 코드로 인스턴스 화를 한 후 컨트롤을 추가시킬 수도 있다. (동적으로 만들 수 있다)
    - 디자인 단이든 코드 단이든 웹폼의 기능을 동일하게 속성 값으로 지정할 수 있다.

  <ASP:Calendar>의 디자인 변경
    1) 달력의 길이와 높이를 적당하게 조절
      cal1.Width = 500;
      cal1.Height = 500;
    calendar에 지정한 id인 cal1의 구조체 변수 중 하나인 Width와 Height를 받아 크기 설정 가능 

    2) 달력에 구분선을 주어 일반 달력처럼 보이게
      cal1.ShowGridLines = true;
      캘린더 클래스의 속성 값인 ShowGridLines 값이 true가 되면 모눈선 그려짐 (false일 땐 안그려짐)

    3) 날짜의 첫 줄인 "일 월 화 수 목 금 토" 항목에 배경색 넣기
      일단 색상과 연관하여 <%@ Import Namespace = "System.Drawing" %> 를 문서 상단에 추가
      cal1.DayHeaderStyle.BackColor = System.Drawing.Color.Yellow;
      를 사용하여 요일 색상을 노란색으로 변경
    
    위1),2),3) 항목을 아래와 같이 사용가능하다.
    <ASP:Calendar id="cal1" runat="server" Width="500" Height="500" ShowGridLines="true">
    <DayHeaderStyle BackColor="yellow"></DayHeaderStyle>
    </ASP:Calendar>

  5. 웹폼 중 하나인 TreeView 컨트롤
    트리뷰의 형태는 다음과 같다.
    <ASP:TreeView id="tree1" ExpandDepth="0" runat="server">
    <Nodes>
    <asp:TreeNode Text="하위메뉴열기" SelectAction="Expand"> 
    <asp:TreeNode Text="메뉴1" />
    <asp:TreeNode Text="메뉴2" />  
          <asp:TreeNode Text="메뉴3" SelectAction="Expand">
              <asp:TreeNode Text="메뉴 3-1" />  
              <asp:TreeNode Text="메뉴 3-2" />
          </asp:TreeNode>  
    </asp:TreeNode>
    </Nodes>
    </ASP:TreeView>
  이와 같이 사용 가능

  6. 이벤트 포스트 백 개념. 
    클릭 이벤트
    OnClick="호출할_메서드"
    OnCommand="호출할_메서드"

    - 서버 컨트롤을 이용하면 각각의 컨트롤은 해당 이벤트 처리 후에도 계속해서 해당 상태를 유지하는 특징이 있음
    ViewState (뷰스테이트)
    <input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="/wEPDwUKLTM1OTA4MjdG9uLCBob3dlgQ1c6kbnHCj7SXQjEO5/4IM=" />
    위에서 이 View State를 계속해서 보내며 유지한다. 이런 행위를 포스트 백이라고 부름
    포스트 백은 IsPostBack 이라는 Bool 자료형으로 체크할 수 있음
    

    (21.02.24)
    <23장~>
      1. DB와 ASP.NET간에 연결
        - DB 연동을 위해서는 System.Data namespace를 참조해야 함.
        - SQL Server에 연동하기 위해서는 System.Data.SqlClient namespace를 참조해야함
    
        string str_conn = "server=NAVSKH;user id=sa;password=1121;database=aspnet";
        SqlConnection conn = new SqlConnection(str_conn);
        conn.Open();
        
        이렇게 하면 연결 됨.
    
      2. 쿼리문의 사용 및 출력
        1) 결과가 없는 쿼리문을 실행할 때 : ExecuteNonQuery 메서드 사용
          string QUERY ="INSERT INTO member_table VALUES('aspnet', '1234', '닷넷초보', getdate())";
          SqlCommand cmd = new SqlCommand(QUERY, conn);
          cmd.ExecuteNonQuery();
    
        2) 결과가 있는 쿼리문을 실행할 때 : ExecuteScalar, ExecuteReader 메서드 사용
          - ExcuteScalar 값은 결과가 여러개여도 첫번째 값 하나만 반환 함.
          string QUERY ="SELECT user_name FROM member_table WHERE user_id='aspnet'";
          SqlCommand cmd = new SqlCommand(QUERY, conn);
          object result = cmd.ExecuteScalar();
          Response.Write(result);
    
          - ExcuteReader의 경우는 여러개의 값을 받을 수 있음
    
        3) DataAdapter로 접근하여 db를 불러올 수 있다.
          SqlDataAdapter da = new SqlDataAdapter(QUERY, conn);
          DataSet ds = new DataSet();
          da.Fill(ds); 
          위와 같이 사용하며 ds라는 DataSet에 해당 sql의 결과를 저장하여 한 셀씩을 사용할 수 있다.
    
        4) DataGrid, DataBind
          dg1.DataSource = ds.Tables[0];
          dg1.DataBind();
          <form runat="server">
          <ASP:DataGrid id="dg1" runat="server" />
          </form>
          DataGrid 서버 컨트롤을 만들어서 DataBind 메서드 호출하면 그 결과를 표의 형태로 그대로 가져와서 출력해줄 수 있다.
          DataGrid와 같은 웹폼이 많이 있음
    
      3. Repeater
        데이터 컨트롤인데 형식이 지정되어 있지 않아 유연한 사용이 가능
        사용법) 웹폼 Repeater(id는 rpt1)를 만들고 DataBind해서 사용할 수 있다.
          rpt1.DataSource = ds.Tables[0];
          rpt1.DataBind();
      
          <ASP:Repeater id="rpt1" runat="server">
          
          <ItemTemplate>
            <%# Eval("user_name") %>
            <br>
            가입일 : <b><%# Eval("user_regdate") %></b>
            <hr>
          </ItemTemplate>
          
          </ASP:Repeater>
    
          리피터로 받아온 변수는 출력할 때, 조작이 가능하다. <%# Eval("user_regdate") %>
          
    
      4. 프로그래밍 코드와 디자인을 분리.
        분리 방법
        1) aspx.cs 파일로 만들어서 필요한 코드를 넣는 것.
        필수 속성인 Inherits 속성과 CodeFile 속성을 지정
          *디자인 페이지
          - Inherits : "네임스페이스.클래스" 이름
          - CodeFile : "aspx.cs 가 있는 파일 경로"
          *.cs 코드
          - Page 클래스를 상속해야 함.
          - class "Inherits에 등록한 클래스 명"
          
        2) asp.net에 예약된 '/app_code'에 넣는 것
          *디자인 페이지
          - Inherits 속성만 지정해주면 됨.
          *.cs 코드
          - Page 상속 동일
          - 서버컨트롤 정의해줘야 함. (이게 불편)
    
        3) 특정한 .aspx 처리 이외의 목적으로 사용하는 "단독 라이브러리" 형식인 .dll로 컴파일하여 "/bin" 폴더에 넣어 사용
          (프로그램 코드 노출되지 않음)
          - 컴파일하는 과정이 필요하다. (csc.exe가 컴파일러임.)
          - cmd 창에 prompt> csc_/t:library_c:\home\test.cs 입력하여 컴파일함.
          - 컴파일한 파일을 /bin 폴더에 넣고, dll을 참조하는 파일을 /app_code에 넣고 aspx에서 /app_code에 넣는 파일을 참조하여 사용하면 됨.

      5. 템플릿 구성
        <%@ Register TagPrefix="INCLUDE" TagName="TOP" src="top.ascx" %>
        <INCLUDE:TOP runat="server" />
        이런식으로 TOP에 구역을 만들 수 있음. 
    
      6. 전역변수 
        웹의 공유할 수 있는 변수
        1) Application 변수
        Application["변수명"] 형식(컬렉션)으로 값을 할당한다
        [할당]
        Application["login"] = "abcd"; 
        [읽기]
        string tmp = (string)Application["login"];
        ** bin 에 저장되는 dll의 경우
        Httpcontext.Current를 앞에 붙여줌.

        2) Session 변수
        Application변수와 사용하는 방법 동일
        Application변수는 계속 유지되는 변수
        Session 변수는 창이 닫히면 다시 초기화 되는 변수

        3) global.asax 파일
        이 페이지가 있으면 실행되고, 없으면 실행되지 않음
        - Applictaion 이 시작/종료 시 1번만 실행되는 Event
          Application_Init
          Application_Start
          Application_Dispose
          Application_End
        - Session 이 시작/종료 될 때 실행되는 Event
          Session_Start
          Session_End
        
        
<게시판 모델링>
-- 회원 등록  --
1. 회원 아이디
2. 회원 비밀번호
3. 닉네임
4. 회원 가입일 (현재 시간 자동입력)

* 회원 아이디는 중복확인해야 한다. 
  - 중복된 아이디라면 "중복된 아이디입니다." 얼럿창
  1) "중복체크" 버튼 우측에 Label 컨트롤 배치. id는 lblCheckResult
  2) "회원가입체크" 다음줄에 Label 컨트롤 배치. id는 lblJoinResult
  3) <form>태그 바로 밑에(위치는 상관없으나 일반적으로 hidden 값은 모아두자) 배치. id 는 hdnCheckID
  
  여기서 db 연동하는 중간에 dll파일을 만들어 연동했으나 자꾸 namespace를 못가져오는 현상이 발생했다.
  하나하나 찾아보니 IIS 상의 경로가 C:\home 으로 되어 있었고
  프로젝트 파일은 C:\home\home_start에 만든 후 dll의 경로를 C:\home\home_start\bin 으로 했더니 에러가 발생했다.
  dll의 경로는 iis 상의 경로 C:\home에 bin이 있어야 한다.

(21.02.25)
<34장~>
1. 회원가입 기능
2. 회원로그인 및 로그아웃. 세션 변수를 이용해 상황별 레이아웃 변경 (Panel 웹폼 또는 div 서버컨트롤)

1. 회원 아이디의 특징
  1) 회원 ID는 비어있을 수 없음. (txtID 속성이 비어있는지 확인)
  2) 회원 ID는 영문자 또는 숫자로만 가능. (문자열이 영문과 숫자로만 이루어져 있는지)
  3) 회원 ID는 4자 이상, 12자 이하만 가능. (.Length를 사용할 것.)
  
2. 로그인/ 로그아웃 전략
  top.ascx 에 로그인/ 로그아웃 탭을 만들어 해당 기능하게 하고
  로그인 시  - login_proc.aspx를 동작
  로그아웃 시 - logout.aspx를 동작
  로그인 중이면 --> 로그아웃 창 visible 속성 false
  반대면 visible 속성 true

  logout.aspx에서 Session.Abandon() 메서드를 사용하여 세션에 해당하는id, password를 모두 날려줄 수 있다.

  <게시글 데이터 베이스 모델링>
  게시글에는 3가지 종류로 나눌 수 있는데.
  1. 자유게시판
  2. 포토게시판
  3. 방명록
  그러나 이 3가지 모두 같은 형식의 데이터 베이스로 만들고 게시판 종류에 맞게 땡겨쓰도록 만들 것임

-- 게시판 글 작성자가 쓸 내용 --
1. 제목
2. 내용
3. 파일첨부

[구현]
제목은 TextBox(id=txtTitle) 로 좀 길게
내용은 크게 - TextBox(id=txtContent) (textarea 태그로 렌더링) (TextMode=Multiline)
파일첨부 컨트롤인 FileUpload(id=upload) 웹폼을 배치
"글쓰기" Button 웹폼 컨트롤. (id=btnWrite)로 지정 (OnClick=btnWrite_Click)

*참고
어셈블리 참조하여 컴파일하는 방법
C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc /t:library /r:c:\home\bin\Database.dll c:\home\bin\Board.cs
위와 같은 명령어를 .batch파일로 만들어 실행시키면 됨.

결국 서버컨트롤은 렌더를 통해 태그로 변환되는 것이다.
TextBox --> input 태그 
Label --> span태그
DataGrid --> table 태그


-- 게시판 글 작성시 자동으로 들어갈 내용 --
1. 글의 고유한 번호 (각각의 글을 구분하기 위한 중요한 값이다.) 
2. 게시판 카테고리 (게시판을 한 개가 아니라 두 개 이상을 사용하기 위해서 구분될 것이다)
3. 작성자
4. 작성일
5. 조회수
6. 추천수

-- 게시판 댓글 --
1. 댓글 고유 번호 (역시 구분에 필요한 값이다)
2. 댓글이 붙은 게시물 글 번호 (댓글은 글마다 다르게 달리므로 구분을 위해 필요한 겂이다.)
3. 댓글작성자
4. 댓글내용
5. 작성일시
* 게시판 글의 DB 테이블 : board
* 게시판 글의 댓글 DB 테이블 : board_comment


(21.02.26)
1. 세션에 대하여
* HTTP는 비연결 지향임.
클라이언트 -> 서버에 요청 -> 클라이언트에 응답 후 끝 계속 연결되어 있을 필요 없음
이렇게 요청할 때, 이 사용자가 누구인가 어떤 데이터를 다루고 싶은가 구분이 필요 
쿠키와 비교되어짐. (쿠키는 사용자에 의해 변조 될 수 있음. 세션은 서버의 자원을 할당하게 됨)
깊이있는건 나중에 차차 공부하기로...

2. 게시판 댓글 처리 기능
* 세션의 로그인 ID가 NULL 이면 댓글 치지 못하게 막을 것. (해당 함수.VISIBLE = FALSE)
댓글 입력 완료 후 서버컨트롤로 받을 때 그 값을 0으로 만들어줘야 함. 세션에 계속 postback

3. 서버컨트롤 중 LiteralControl 은 렌더링되는 태그의 결과가 없는 컨트롤
그냥 string 그대로 반환된다는 뜻

4. 글 수정 글 삭제
  1) 조회수 올리는 쿼리문 추가
    UPDATE board SET readnum=readnum+1 WHERE category='test' AND board_id=1
  2) 추천 기능 연관된 유의사항
    (1)비회원의 추천가능여부 (2)추천 중복체크
    회원만 추천 가능 추천 중복처리 하지 않게 만듬
  3) 글 수정
    세션값의 id 받아서 로그인 상태 확인 후 로그인 된 아이디가 글 작성한 아이디와 같으면 수정 가능 (Editmode 변수 true 세팅)
  4) 글 삭제
    마찬가지로 로그인 id와 작성id가 같으면 삭제 가능 (DeleteMode 변수 true 세팅)
    글삭제 쿼리문 : DELETE FROM board WHERE category='test' board_id=1
    댓글삭제 쿼리 : DELETE FROM board_comment WHERE board_id=1

5. 검색 기능 추가
  1) 쿼리문 : "SELECT * FROM board WHERE category='" + category + "' AND title LIKE '%keyword%'  ORDER BY board_id DESC "
  2) 제목에서 검색할 것인가, 내용으로 검색할 것인가 (DropDownList로 구현)

6. 페이징
  1) [ 페이지 게시판에서 보여줄 데이터 '시작하는 위치' 구하기 ]
    시작위치 = (현재페이지번호 - 1)  X 보여줄글수) + 1
    ※ 보여줄 글 수 : 10개
  2) 쿼리문 
  SELECT * FROM
  (  SELECT ROW_NUMBER() OVER(ORDER BY board_id DESC) AS row_num, * FROM board tmp ) 
  AS BOARD_NUMBERED 
  WHERE row_num > 0 AND row_num < 11


  (21.02.28)
  예제만 따라가다보니 구현 안된 점들
  * 추천.. 나갔다 들어오면 중복으로 가능 함... (글 조회할 때 id 조회하여 이미 추천한 아이디면 추천 못하게 막아야함.)
    - 일단 로그인이 안되어 있으면 추천 못하게 막아야 함.
      : board_view에서 Session["login_id"]를 받아서 null 값이면 로그인하고 이용하세요 찍어내야 함.
    - 로그인 되었을 땐, 이미 추천했으면 추천 못하게 막아야 함.
    (누가 추천했는지를 알아야하는데... 그럴려면 해당 id가 어떤 글을 추천했는지 모아둔 db가 필요함.)
    whoRecommend db를 생성 user_id, user_name, board_id를 받아서 추천할 때 db에 등록하게끔 만들고
    board_view.aspx 문서의 Page_Load() 단에 RecommendCheck를 하게끔 만들어 둘것.
    1) 일단 user_ID가 whoRecommend db에 있으면 bool 값으로 false를 return 할 것.
    2) false를 받으면 추천버튼이 추천 취소 버튼으로 txt가 바뀌게 설정
    3) 추천 취소를 클릭 시 RecommendMinus()를 불러올 것
    4) RecommendMinus()에서 update 시켜 줄 것.

  (21.03.02~)  
    <디버깅 필요사항>
  * 그리고 조회 수, 추천 수, 즉각 즉각 업데이트 되도록 수정 필요.
  즉각즉각 페이지 새로고침 (여기까지 구현 하였음)
  - 조회수는 page_load 될 때 그냥 +1 해서 찍게 만들었음
  - 추천 수는 추천하기 버튼 누를 때 page_load() 불러오게 만들었음.
  -----------------------------------------------------------------------------------------

  * 관리자 모드일 경우 수정, 삭제 가능하게끔 수정.
    admin으로 로그인할 경우, 수정/삭제 버튼 보이게끔 수정하였음.
  
  * 게시판 Detail에 신경쓰기
  1. 로그인 안한 상태에서 글 쓴 경우, 리스트에서 작성자가 표시 안되면서 글은 올라감.
    - 로그인 안한 상태에서 글 쓰면 로그인하라는 문구 뜨게끔 수정하였음.
    - 방명록의 경우만 로그인 필요 없이 방문자명만 입력하여 작성할 수 있음.

  2. 방명록에서 새글 쓰기 삭제
    그리고 방명록이 너무 길어지지 않도록 Board.PAGE_SIZE 를 5로 줄일 것.
    홈페이지 관리자만 방문객의 글에 답변을 달아주는 기능 추가 
    이건 너무 대작업이 될듯... 아예 뜯어 고쳐야 하고, db 구조부터 바꿔야 할 수도 있음.
    

  3. 게시판에서 글 작성 시
    엔터를 쳐서 다음줄로 넘겼으나 글 보기에서는 다음줄에 출력 안되는 문제 있음.
    style="word-wrap:break-word; white-space: pre-line; table-layout: fixed;" 를
    asp:label 컨트롤에 추가하였더니 해결됨.


  4. 디자인 관련해서 수정 필요
  
  



  추가적으로 이제 원래 홈페이지 구현 취지에 맞게 기능을 바꿔가면서 놀아야 할 때가 왔다!!
  
  파트장님 보내주신 필요 기능.
  [PIMS 업무요청]
    운영자가 요청 / 대학에서 요청
    대분류 (구분), 요구사항 구분(종류)
    작성 > 에디터
    파일첨부 (엑셀, 이미지 등등)
    제출 > 개발자에게
      메일로 발송

    개발자가 접근하면
    요청사항 확인
    접수 > 상태 구분
    완료처리
      운영자 / 대학으로 피드백
